name: Publish

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - master

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: communitybot
  IMAGE_VERSION: $(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    - name: Test with unittest
      run: |
        python -m unittest

  # Push image to GitHub Package Registry.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME

      - name: Log into registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - name: Notify on publish success
        if: success()
        run: |
          IMAGE_ID=$IMAGE_NAME
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "master" ] && VERSION=latest
          curl -X POST -H "Content-Type: application/json" --data "{\"embeds\":[{\"title\": \"Publish complete on ${{ github.repository }} \",\"url\": \"https://github.com/${{ github.repository }}\",\"description\": \"**Publish Image**: $IMAGE_ID:$VERSION\nThe outcome of the publish was: **${{ job.status }}** \",\"color\": 65280}]}" ${{ secrets.DISCORD_WEBHOOK }}
      - name: Notify on publish failure
        if: failure()
        run: |
          IMAGE_ID=$IMAGE_NAME
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "master" ] && VERSION=latest
          curl -X POST -H "Content-Type: application/json" --data "{\"embeds\":[{\"title\": \"Publish failure on ${{ github.repository }} \",\"url\": \"https://github.com/${{ github.repository }}\",\"description\": \"**Publish Image**: $IMAGE_ID:$VERSION\nThe outcome of the publish was: **${{ job.status }}** \",\"color\": 16716032}]}" ${{ secrets.DISCORD_WEBHOOK }}

  deploy:
    needs: push
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/master'

    steps:
      - uses: actions/checkout@v2
        
      - name: Set up environment
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && VERSION=latest
          echo "::set-env name=IMAGE_VERSION::$VERSION"
      
      - uses: azure/setup-kubectl@v1
        id: install
      - uses: azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }} # Use secret (https://developer.github.com/actions/managing-workflows/storing-secrets/)
        id: setcontext
      - uses: Azure/k8s-deploy@v1
        with:
          namespace: 'real-engineering'
          manifests: |
              kubernetes/communitybot-cd-deploy.yml
          images: docker.pkg.github.com/communitybot:${{env.IMAGE_VERSION}}
      - name: Notify on Deploy success
        if: success()
        run: |
          IMAGE_ID=$IMAGE_NAME
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "master" ] && VERSION=latest
          curl -X POST -H "Content-Type: application/json" --data "{\"embeds\":[{\"title\": \"Deploy complete on ${{ github.repository }} \",\"url\": \"https://github.com/${{ github.repository }}\",\"description\": \"**Deploy Image**: $IMAGE_ID:$VERSION\nThe outcome of the Deploy was: **${{ job.status }}** \",\"color\": 65280}]}" ${{ secrets.DISCORD_WEBHOOK }}
      - name: Notify on Deploy failure
        if: failure()
        run: |
          IMAGE_ID=$IMAGE_NAME
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [ "$VERSION" == "master" ] && VERSION=latest
          curl -X POST -H "Content-Type: application/json" --data "{\"embeds\":[{\"title\": \"Deploy failure on ${{ github.repository }} \",\"url\": \"https://github.com/${{ github.repository }}\",\"description\": \"**Deploy Image**: $IMAGE_ID:$VERSION\nThe outcome of the Deploy was: **${{ job.status }}** \",\"color\": 16716032}]}" ${{ secrets.DISCORD_WEBHOOK }}


      
